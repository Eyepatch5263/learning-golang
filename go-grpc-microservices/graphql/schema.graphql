scalar Time

type Account {
    id:ID!
    name:String!
    orders:[Order!]!
}

type Product {
    id:ID!
    name:String!
    price:Float!
    description:String!
}

type Order {
    id:ID!
    createdAt:Time!
    totalPrice:Float!
    products:[OrderedProduct!]!
}

type OrderedProduct {
    id:ID!
    name:String!
    description:String!
    price:Float!
    quantity:Int!
}

input PaginationInput {
    skip:Int
    take:Int
}

input AccountInput {
    name:String!
}

input ProductInput {
    name:String!
    description:String!
    price:Float!
}

input OrderedProductInput {
    id:ID!
    quantity:Int!
}

input OrderInput {
    accountId: String!
    products: [OrderedProductInput!]
}

type Mutation {
    createProduct(input: ProductInput!): Product
    createAccount(account:AccountInput!):Account
    createOrder(order:OrderInput!):Order
}

type Query {
    accounts(pagination:PaginationInput,id:ID!):[Account!]!
    products(pagination:PaginationInput,query:String, id:String):[Product!]!
}